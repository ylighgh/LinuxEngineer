=== 从MySQL同步数据到ElasticSearch

参考文档：

* https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html[Jdbc input plugin]
* https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html[Elasticsearch output plugin]

[source, bash]
----
/usr/share/logstash/bin/logstash-plugin install logstash-input-jdbc

wget -O /usr/share/logstash/lib/mysql-connector-java-8.0.18.jar https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar

[ ! -d "/data/redas_meta_sync" ] && mkdir /data/redas_meta_sync/logs
chown -R logstash:logstash /usr/share/logstash/data /data/redas_meta_sync

cat << EOF >  /data/redas_meta_sync/logstash_mysql_es_.conf
input{
	jdbc {
		# 驱动方式
		jdbc_driver_library => "/usr/share/logstash/lib/mysql-connector-java-8.0.18.jar"
		# 驱动类名
		jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
		# mysql 数据库链接,blog为数据库名 &useSSL=false 这个是为了防止不支持ssl连接的问题
		jdbc_connection_string => "jdbc:mysql://localhost:3306/redas?serverTimezone=Asia/Shanghai&useUnicode=yes&characterEncoding=UTF-8"
		# 连接数据库用户名
		jdbc_user => "redas"
		# 连接数据库密码
		jdbc_password => "geek"
		# 是否启用分页
		jdbc_paging_enabled => "true"
		jdbc_page_size => "50000"
		# 设置监听间隔  各字段含义（由左至右）分、时、天、月、年，全部为*默认含>义为每分钟都更新
		schedule => "*/1 * * * * "
		# 直接写sql语句用这个
		statement => "select `id`, `content` from `recr_page_storage` where id > :sql_last_value order by id"
		# 是否需要记录某个column 的值,如果 record_last_run 为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值
		use_column_value => true
		# 是否记录上次执行结果, 如果为真,将会把上次执行到的 tracking_column 字段的值记录下来,保存到 last_run_metadata_path 指定的文件中
		record_last_run => true
		# 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的.比如：ID.
		tracking_column_type => "numeric"
		tracking_column => "id"
		# 保存上一次运行>的信息(tracking_column)
		last_run_metadata_path => "/data/redas_meta_sync/last_run.txt"
		# 是否清除 last_run_metadata_path 的记录,如果为真那么每次都相当于从头开始查询所有的数据库记录
		clean_run => false
	}
}
filter {
      json {
        source => "content"
        remove_field => "content"
      }
}
output{
	elasticsearch {
		#这里可以是数组，可以是多个节点的地址，会自动启用负载均衡
		hosts => ["127.0.0.1:9200"]
		index => "redas_test"
		# 将表Iid作为ES的主键，防止数据重复
		document_id => "%{id}"
	}
	file {
		path => "/data/redas_meta_sync/logs/%{+YYYY-MM-dd}.log"
		codec => json_lines
	}
}
EOF

cat << EOF > /usr/lib/systemd/system/redas_meta_sync.service
[Unit]
Description=Redas Position Infomation Auto-Sync to ElasticSearch
After=network.target remote-fs.target nss-lookup.target mysqld.service elasticsearch.service

[Service]
Type=simple
User=logstash
Group=logstash
WorkingDirectory=/data/redas_meta_sync
ExecStart=/usr/share/logstash/bin/logstash -f /data/redas_meta_sync/logstash_mysql_es_.conf -l /data/redas_meta_sync/logs --path.settings /etc/logstash
StandardOutput=null
StandardError=null

[Install]
WantedBy=multi-user.target
EOF

systemctl enable redas_meta_sync
systemctl start redas_meta_sync
----

