=== 技巧汇总

==== 捕获过滤器

**`捕获过滤器` 不是 `应用显示过滤器`**

捕获过滤器是工作在抓包过程中，此时并未解包，所有数据都是二进制，不能进行高级过滤筛选。比如不支持 `http.request.method == POST`

捕获过滤器文档::
https://wiki.wireshark.org/CaptureFilters[CaptureFilters]

`字符串匹配-捕获过滤器` 生成器::
https://www.wireshark.org/tools/string-cf.html[String-Matching Capture Filter Generator]

===== 捕获微信回调

.捕获包含 `POST /pay/callback` 的TCP包，保存到 `wechat.shark.pcap`
[source, bash]
----
tshark -i em1 -n -f 'port 80 and tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354 && tcp[((tcp[12:1] & 0xf0) >> 2) + 4:4] = 0x202f7061 && tcp[((tcp[12:1] & 0xf0) >> 2) + 8:4] = 0x792f6361 && tcp[((tcp[12:1] & 0xf0) >> 2) + 12:4] = 0x6c6c6261 && tcp[((tcp[12:1] & 0xf0) >> 2) + 16:2] = 0x636b'  -w wechat.shark.pcap
----

image::POST_pay_callback.jpg[title="POST /pay/callback `字符串匹配-捕获过滤器` 生成器截图"]

===== 捕获过滤器常用表达式

. Capture only traffic to or from IP address 172.18.5.4:
`host 172.18.5.4`

. Capture traffic to or from a range of IP addresses: +
`net 192.168.0.0/24` +
or +
`net 192.168.0.0 mask 255.255.255.0`

. Capture traffic from a range of IP addresses: +
`src net 192.168.0.0/24` +
or +
`src net 192.168.0.0 mask 255.255.255.0`

. Capture traffic to a range of IP addresses: +
`dst net 192.168.0.0/24` +
or +
`dst net 192.168.0.0 mask 255.255.255.0`

. Capture only DNS (port 53) traffic: +
`port 53`

. Capture non-HTTP and non-SMTP traffic on your server (both are equivalent): +
`host www.example.com and not (port 80 or port 25)` +
`host www.example.com and not port 80 and not port 25`

. Capture except all ARP and DNS traffic: +
`port not 53 and not arp`

. Capture traffic within a range of ports +
`(tcp[0:2] > 1500 and tcp[0:2] < 1550) or (tcp[2:2] > 1500 and tcp[2:2] < 1550)` +
or +
`tcp portrange 1501-1549`

. Capture only Ethernet type EAPOL: +
`ether proto 0x888e`

. Reject ethernet frames towards the Link Layer Discovery Protocol Multicast group: +
`not ether dst 01:80:c2:00:00:0e`

. Capture only IPv4 traffic - the shortest filter, but sometimes very useful to get rid of lower layer protocols like ARP and STP: +
`ip`

. Capture HTTP GET requests. This looks for the bytes 'G', 'E', 'T', and ' ' (hex values 47, 45, 54, and 20) just after the TCP header. "tcp[12:1] & 0xf0) >> 2" figures out the TCP header length. + 
`port 80 and tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x47455420`

更多使用方法，请参考 https://wiki.wireshark.org/CaptureFilters[CaptureFilters]

